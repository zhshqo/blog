<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">  
<generatorConfiguration>  
	
	<!-- 
	    context:生成一组对象的环境 
	    id:必选，上下文id，用于在生成错误时提示
	    defaultModelType:指定生成对象的样式
	        1，conditional：类似hierarchical；
	        2，flat：所有内容（主键，blob）等全部生成在一个对象中；
	        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
	    targetRuntime:
	        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
	        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
	    introspectedColumnImpl：类全限定名，用于扩展MBG
	-->
   <context id="testTables" targetRuntime="MyBatis3">  
       <commentGenerator>  
           <!-- 是否去除自动生成的注释 true：是 ： false:否 -->  
           <property name="suppressAllComments" value="true" />  
       </commentGenerator>  
       <!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->  
        <!--   
        <jdbcConnection driverClass="oracle.jdbc.driver.OracleDriver"  
            connectionURL="jdbc:oracle:thin:@150.16.17.22:1521/wsbs" userId="hr"  
            password="hr123">  
        </jdbcConnection>-->  
        <jdbcConnection driverClass="com.mysql.jdbc.Driver"  
            connectionURL="jdbc:mysql://127.0.0.1:3306/layblog"   
            userId="root"  
            password="root">  
        </jdbcConnection>   
  
        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和   
            NUMERIC 类型解析为java.math.BigDecimal
                默认情况下的转换规则为：
		如果精度>0或者长度>18，就会使用java.math.BigDecimal
		如果精度=0并且10<=长度<=18，就会使用java.lang.Long
		如果精度=0并且5<=长度<=9，就会使用java.lang.Integer
		如果精度=0并且长度<5，就会使用java.lang.Short
		 -->  
        <javaTypeResolver>  
            <property name="forceBigDecimals" value="false" />  
        </javaTypeResolver>  
  
        <!-- targetProject:生成PO类的位置 -->  
        <javaModelGenerator targetPackage="com.rinpo.eam.layblog.model"  
            targetProject="layblog/src/main/java">  
            <!-- enableSubPackages:是否让schema作为包的后缀 -->  
            <property name="enableSubPackages" value="false" />  
            <!-- 从数据库返回的值被清理前后的空格 -->  
            <property name="trimStrings" value="true" />  
        </javaModelGenerator>  
        
        <!-- targetProject:mapper映射文件生成的位置 -->  
        <sqlMapGenerator targetPackage="com.rinpo.eam.layblog.dao.mapping"   
            targetProject="layblog/src/main/java">  
            <!-- enableSubPackages:是否让schema作为包的后缀 -->  
            <property name="enableSubPackages" value="false" />  
        </sqlMapGenerator>  
        
        <!-- targetPackage：mapper接口生成的位置
	         type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
	         1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
	         2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
	         3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
	                  注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
         -->  
        <javaClientGenerator type="XMLMAPPER"  
            targetPackage="com.rinpo.eam.layblog.dao"   
            targetProject="layblog/src/main/java">  
            <!-- enableSubPackages:是否让schema作为包的后缀 -->  
            <property name="enableSubPackages" value="false" />  
        </javaClientGenerator> 
         
        <!-- 指定数据库表 -->
        <table tableName="t_cate"></table>
        <table tableName="t_article"></table>
        <table tableName="t_comment"></table> 
        <table tableName="t_role"></table> 
        <table tableName="t_tag"></table> 
        <table tableName="t_tag_refer"></table> 
        <table tableName="t_user"></table> 
        <table tableName="t_upload"></table> 
    </context>  
</generatorConfiguration>
